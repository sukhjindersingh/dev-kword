{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Design_TaoBao.kick","options":{"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_wrappedobj":false,"compat_filterproto":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":false,"run_at":"document-end"},"enabled":false,"position":2,"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgRGVzaWduX1Rhb0Jhby5raWNrCi8vIEBuYW1lc3BhY2UgIGtpY2sKLy8gQHZlcnNpb24gICAgMC4xYgovLyBAZGVzY3JpcHRpb24gIGVudGVyIHNvbWV0aGluZyB1c2VmdWwKLy8gQGluY2x1ZGUgICAgKjovL2Rlc2lnbi50YW9iYW8uY29tLyoKLy8gQHJlcXVpcmUgICAgaHR0cDovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMS42Lm1pbi5qcwovLyBAY29weXJpZ2h0ICAyMDExKywgQGtpY2sKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24od2luZG93LGRvY3VtZW50KXsKICAgIHZhciBMT0c9ZnVuY3Rpb24odil7Y29uc29sZS5lcnJvcih2KTt9OwoKICAgIAogICAgCQl2YXIgX2NzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CgkJX2Nzcy5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2tfY3NzJyk7CgkJX2Nzcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTsKICAgIF9jc3MuaW5uZXJIVE1MID0KICAgICAgICAiLnVpLWRpYWxvZywudWktZGlhbG9nLWRkLC51aS1kaWFsb2ctYmQsLmtzLWRpYWxvZy5rcy1zdGRtb2QtYm9keSwudWktZGlhbG9nLWJkIGlmcmFtZSwua2Utd2Via2l0LC5rZS10ZXh0YXJlYS13cmFwLC5zZXR0aW5nLC5zZXR0aW5nLW1vZC1jdXN0b20gdGFibGUsZGl2LnVpLWRpYWxvZyBpZnJhbWUuaWZye3dpZHRoOjEwMCUhaW1wb3J0YW50O2hlaWdodDoxMDAlIWltcG9ydGFudDt0b3A6MzBweCFpbXBvcnRhbnR9IisKICAgICAgICAiLnVpLWRpYWxvZ3twb3NpdGlvbjpmaXhlZH0iKwogICAgICAgICIua2UtdGV4dGFyZWEtd3JhcHtoZWlnaHQ6NjAwcHggIWltcG9ydGFudDsiOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChfY3NzKTsKCn0pKHdpbmRvdyxkb2N1bWVudCkKCg=="},{"name":"chrome.userScript.kick","options":{"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_wrappedobj":false,"compat_filterproto":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":false,"run_at":"document-end"},"enabled":false,"position":3,"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgY2hyb21lLnVzZXJTY3JpcHQua2ljawovLyBAbmFtZXNwYWNlICAgCi8vIEB2ZXJzaW9uICAgIDEuMC4wLmEKLy8gQGRlc2NyaXB0aW9uICBlbnRlciBzb21ldGhpbmcgdXNlZnVsCi8vIEBpbmNsdWRlICAgIGh0dHA6Ly8qLyoKLy8gQHJlcXVpcmUgICAgaHR0cDovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMS42Lm1pbi5qcwovLyBAY29weXJpZ2h0ICAyMDExKywga2ljawovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50KSB7CiAgICBpZih3aW5kb3cgIT0gd2luZG93LnRvcCkgcmV0dXJuOyAgICAgCgl2YXIgX0QgPSBmdW5jdGlvbihfb2JqKSB7CgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChfb2JqKTsKCX0KCXZhciBMT0cgPSBmdW5jdGlvbihlKSB7CgkJY29uc29sZS5lcnJvcihuZXcgRGF0ZSgpICsgIiA6ICIgKyBlKTsKCX0KCXZhciBnID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAKalF1ZXJ5LmZuLmRyYWcgPSBmdW5jdGlvbigpeyAgCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ICAKICAgICAgICB2YXIgZHJhZ2luZyA9IGZhbHNlOyAgCiAgICAgICAgdmFyIHN0YXJ0TGVmdCxzdGFydFRvcDsgIAogICAgICAgIHZhciBzdGFydFgsc3RhcnRZOwogICAgICAgICAgCiAgICAgICAgJCh0aGlzKS5jc3MoJ2N1cnNvcicsJ21vdmUnKTsKICAgICAgICAkKHRoaXMpLm1vdXNlZG93bihmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkKHRoaXMpLm9mZnNldCgpOyAgCiAgICAgICAgICAgIHN0YXJ0TGVmdCA9IG9mZnNldC5sZWZ0OyAgCiAgICAgICAgICAgIHN0YXJ0VG9wID0gb2Zmc2V0LnRvcDsgIAogICAgICAgICAgICBzdGFydFggPSBldmVudC5jbGllbnRYOyAgCiAgICAgICAgICAgIHN0YXJ0WSA9IGV2ZW50LmNsaWVudFk7ICAKICAgICAgICAgICAgZHJhZ2luZyA9IHRydWU7CiAgICAgICAgICAgIExPRygiZG93biIpOwoJCQkKICAgICAgICB9KS5tb3VzZW1vdmUoZnVuY3Rpb24oZXZlbnQpeyAgCiAgICAgICAgICAgIGlmIChkcmFnaW5nID09IGZhbHNlKXJldHVybjsgIAogICAgICAgICAgICB2YXIgZGVsdGFYID0gZXZlbnQuY2xpZW50WCAtIHN0YXJ0WDsgIAogICAgICAgICAgICB2YXIgZGVsdGFZID0gZXZlbnQuY2xpZW50WSAtIHN0YXJ0WTsgIAogICAgICAgICAgICB2YXIgbGVmdCA9IHN0YXJ0TGVmdCArIGRlbHRhWDsgIAogICAgICAgICAgICB2YXIgdG9wID0gc3RhcnRUb3AgKyBkZWx0YVk7ICAKICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ2xlZnQnLGxlZnQrJ3B4JykuY3NzKCd0b3AnLHRvcCsncHgnKTsgCiAgICAgICAgICAgIExPRygibW91c2Vtb3ZlIik7ICAgICAgICAgICAgCiAgICAgICAgfSkubW91c2V1cChmdW5jdGlvbihldmVudCl7ICAKICAgICAgICAgICAgZHJhZ2luZyA9IGZhbHNlOwogICAgICAgICAgICBMT0coIm1vdXNldXAiKTsgCgkJfSk7CiAgICB9KTsgIAp9ICAgIAogICAgCiAgICAKLy8gICAgZXZhbChmdW5jdGlvbihwLGEsYyxrLGUscil7ZT1mdW5jdGlvbihjKXtyZXR1cm4gYy50b1N0cmluZygzNil9O2lmKCcwJy5yZXBsYWNlKDAsZSk9PTApe3doaWxlKGMtLSlyW2UoYyldPWtbY107az1bZnVuY3Rpb24oZSl7cmV0dXJuIHJbZV18fGV9XTtlPWZ1bmN0aW9uKCl7cmV0dXJuJ1swLTlhLWpdJ307Yz0xfTt3aGlsZShjLS0paWYoa1tjXSlwPXAucmVwbGFjZShuZXcgUmVnRXhwKCdcXGInK2UoYykrJ1xcYicsJ2cnKSxrW2NdKTtyZXR1cm4gcH0oJ2pRdWVyeS5mbi5kcmFnPTIoKXtlIDMuZWFjaCgyKCl7MCA0PTg7MCA5LGE7MCBiLGM7JCgzKS5kKFwnY3Vyc29yXCcsXCdtb3ZlXCcpOyQoMykubW91c2Vkb3duKDIoMSl7MCA1PSQoMykuNSgpOzk9NS42O2E9NS43O2I9MS5mO2M9MS5nOzQ9dHJ1ZX0pLm1vdXNlbW92ZSgyKDEpe2lmKDQ9PTgpZTswIGg9MS5mLWI7MCBpPTEuZy1jOzAgNj05K2g7MCA3PWEraTskKDMpLmQoXCc2XCcsNitcJ2pcJykuZChcJzdcJyw3K1wnalwnKX0pLm1vdXNldXAoMigxKXs0PTh9KX0pfScsW10sMjAsJ3ZhcnxldmVudHxmdW5jdGlvbnx0aGlzfGRyYWdpbmd8b2Zmc2V0fGxlZnR8dG9wfGZhbHNlfHN0YXJ0TGVmdHxzdGFydFRvcHxzdGFydFh8c3RhcnRZfGNzc3xyZXR1cm58Y2xpZW50WHxjbGllbnRZfGRlbHRhWHxkZWx0YVl8cHgnLnNwbGl0KCd8JyksMCx7fSkpCgogICAgZnVuY3Rpb24gaW5pdCgpIHsgCgkJdmFyIF9kcmFnRElWID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgkJX2RyYWdESVYuc2V0QXR0cmlidXRlKCdpZCcsICdrX2RyYWcnKTsKCQlfZHJhZ0RJVi5pbm5lckhUTUwgPSAiICAgRHJhZyAgQGtpY2sgICI7CiAgICAgICAgCgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChfZHJhZ0RJVik7CiAgICAgICAgCgkJdmFyIF9jc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwoJCV9jc3Muc2V0QXR0cmlidXRlKCdpZCcsICdfY3NzJyk7CgkJX2Nzcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTsKCQlfY3NzLmlubmVySFRNTCA9ICIja19kcmFne3Bvc2l0aW9uOmZpeGVkO3dpZHRoOjQwMHB4O2hlaWdodDozMDBweDt0b3A6MjBweDtyaWdodDoxMHB4O2JvcmRlcjoxcHggc29saWQgcmVkO3otaW5kZXg6OTk5OTt9IjsgLy/mi5bliqggQ1NTIOagt+W8jyAKICAgICAgICAgICAgCgkJZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChfY3NzKTsKCgkJJCgiI2tfZHJhZyIpLmRyYWcoKTsKCgl9CgoJZnVuY3Rpb24gX2RiY2xpY2soZXZlbnQpIHsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPj0gNDAwID8gd2luZG93LmxvY2F0aW9uLmhyZWYgPSBnICsgIiN0b3AiOiB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGcgKyAiI19qX2J1dHRvbSI7IH0KICAgIAoJd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0LCBmYWxzZSk7Cgl3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiZGJsY2xpY2siLCBfZGJjbGljaywgZmFsc2UpOwp9KSh3aW5kb3csIGRvY3VtZW50KTs="},{"name":"goToTop","options":{"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_wrappedobj":false,"compat_filterproto":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":false,"run_at":"document-end"},"enabled":false,"position":4,"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIGdvVG9Ub3AKLy8gQHZlcnNpb24gICAgICAgIDIuMQovLyBAbmFtZXNwYWNlICAgICAgaHR0cDovL3VzZXJzY3JpcHRzLm9yZy9zY3JpcHRzL3Nob3cvMTA1NDExCi8vIEBpbmNsdWRlICAgICAgICAqCi8vIEBhdXRob3IgICAgICAgICBhbnJhbgovLyBAZGF0ZSAgICAgICAgICAgMjAxMS82LzI0Ci8vIEByZXF1aXJlICAgICAgICBodHRwOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0xLjYubWluLmpzCi8vIEBydW4tYXQgICAgICAgICBkb2N1bWVudC1zdGFydAovLyA9PS9Vc2VyU2NyaXB0PT0KCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAg5pu05paw5pel5b+XCiAgIDEwLzIxCeiPnOWNleWPr+mAieW3puWPs+aYvuekuizlh4/lsI/op6blj5HljLrln58s5L+u5aSN5ZyodHdpdHRlciDppa3lkKbkuIvnmoQgYnVnICwg55u45YWz5Y+C5pWw6K6+572u6K+35Zyo6ISa5pys5Lit5L+u5pS5CiAgIDEwLzE5CeWFqOaWsOaYvuekuuaWueW8jyzlop7liqDlubPmu5Hmu5rliqgs6LC35q2M56uZ5YaF5pCc57SiLOebuOWFs+WPguaVsOivt+WcqOiEmuacrOW8gOWni+iuvue9rgogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovLy0tLS3lkITnp43lj4LmlbAtLS0tLy8KdmFyIHNwZWVkT2ZHb1RvVG9wID0gMTAwMDsJCQkvL+a7muWKqOWIsOmhtumDqOeahOmAn+W6piAsIOi2iuWkp+i2iuaFoiAsIDDkuLrlhbPpl60KdmFyIHNwZWVkT2ZHb1RvQm90dG9tID0gMTAwMDsJCS8v5rua5Yqo5Yiw5bqV6YOo55qE6YCf5bqmICwg6LaK5aSn6LaK5oWiICwgMOS4uuWFs+mXrQp2YXIgcG9zaXRpb24gPSAibGVmdCI7CQkJCS8v6Z2i5p2/5L2N572uCgovLy0tLS3ohJrmnKzlvIDlp4stLS0tLy8KaW5pdCgpOwpmdW5jdGlvbiBpbml0KCkgewoJdmFyIG1hcmdpbkxlZnQxID0gIjg1cHgiOwoJdmFyIG1hcmdpbkxlZnQyID0gIjJweCI7CgkKCWlmKHdpbmRvdyAhPSB3aW5kb3cudG9wKQoJCXJldHVybjsKCQoJaWYocG9zaXRpb24gPT0gImxlZnQiKXsKCQlwb3NpdGlvbis9IjowcHg7IgoJCW1hcmdpbkxlZnQxID0gIi0iICsgbWFyZ2luTGVmdDE7CgkJbWFyZ2luTGVmdDIgPSAiLSIgKyBtYXJnaW5MZWZ0MjsKCX0gZWxzZSB7CgkJcG9zaXRpb24rPSI6ODVweDsiCgl9CgkKCS8v6K6+572u5qC35byPCgl2YXIgY3NzID0gIlwKCQl1bCNuYXZpZ2F0aW9uTWVudSB7XAoJCQlwb3NpdGlvbjogZml4ZWQ7XAoJCQltYXJnaW46IDBweDtcCgkJCXBhZGRpbmc6IDBweDtcCgkJCXRvcDogMjAlOyIKCQkJKyBwb3NpdGlvbiArCgkJCSJsaXN0LXN0eWxlOiBub25lO1wKCQkJei1pbmRleDo5OTk5O1wKCQl9XAoJCXVsI25hdmlnYXRpb25NZW51IGxpIHtcCgkJCXdpZHRoOiAyMHB4O1wKCQl9XAoJCXVsI25hdmlnYXRpb25NZW51IGxpIGEge1wKCQkJZGlzcGxheTogYmxvY2s7XAoJCQltYXJnaW4tbGVmdDogLTJweDtcCgkJCXdpZHRoOiAxMDBweDtcCgkJCWhlaWdodDogNzBweDtcCgkJCWJhY2tncm91bmQtY29sb3I6I0NGQ0ZDRjtcCgkJCWJhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtcCgkJCWJhY2tncm91bmQtcG9zaXRpb246Y2VudGVyIGNlbnRlcjtcCgkJCWJvcmRlcjoxcHggc29saWQgI0FGQUZBRjtcCgkJCS1tb3otYm9yZGVyLXJhZGl1czoxMHB4IDEwcHggMTBweCAxMHB4O1wKCQkJLXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMTBweDtcCgkJCS13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDEwcHg7XAoJCQkta2h0bWwtYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDEwcHg7XAoJCQkta2h0bWwtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDEwcHg7XAoJCQktbW96LWJveC1zaGFkb3c6IDBweCA0cHggM3B4ICMwMDA7XAoJCQktd2Via2l0LWJveC1zaGFkb3c6IDBweCA0cHggM3B4ICMwMDA7XAoJCQlvcGFjaXR5OiAwLjY7XAoJCQlmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKG9wYWNpdHk9NjApO1wKCQl9XAoJCS8qKuWbvuagh+iHquWumuS5iSovXAoJCXVsI25hdmlnYXRpb25NZW51IC5nb1RvVG9wIGF7XAoJCQliYWNrZ3JvdW5kLWltYWdlOiB1cmwoaHR0cDovL2IuZHJ5aWNvbnMuY29tL2ltYWdlcy9pY29uX3NldHMvY29xdWV0dGVfcGFydF81X2ljb25zX3NldC9wbmcvNjR4NjQvZ3JlZW5fYXJyb3dfdXAucG5nKTtcCgkJfVwKCQl1bCNuYXZpZ2F0aW9uTWVudSAuZ29Ub0JvdHRvbSBhICAgICAge1wKCQkJYmFja2dyb3VuZC1pbWFnZTogdXJsKGh0dHA6Ly9jLmRyeWljb25zLmNvbS9pbWFnZXMvaWNvbl9zZXRzL2NvcXVldHRlX3BhcnRfNV9pY29uc19zZXQvcG5nLzY0eDY0L2dyZWVuX2Fycm93X2Rvd24ucG5nKTtcCgkJfVwKCQl1bCNuYXZpZ2F0aW9uTWVudSAuc2VhcmNoQnlHb29nbGUgYSAgICAgIHtcCgkJCWJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwOi8vdHltcGFudXMubmV0L1R1dG9yaWFscy9GaXhlZE5hdmlnYXRpb25UdXRvcmlhbC9pbWFnZXMvc2VhcmNoLnBuZyk7XAoJCX1cCgkJLyoqXAoJCXVsI25hdmlnYXRpb25NZW51IC5wb2RjYXN0cyBhICAgICAge1wKCQkJYmFja2dyb3VuZC1pbWFnZTogdXJsKGh0dHA6Ly90eW1wYW51cy5uZXQvVHV0b3JpYWxzL0ZpeGVkTmF2aWdhdGlvblR1dG9yaWFsL2ltYWdlcy9pcG9kLnBuZyk7XAoJCX1cCgkJdWwjbmF2aWdhdGlvbk1lbnUgLnJzc2ZlZWQgYSAgIHtcCgkJCWJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwOi8vdHltcGFudXMubmV0L1R1dG9yaWFscy9GaXhlZE5hdmlnYXRpb25UdXRvcmlhbC9pbWFnZXMvcnNzLnBuZyk7XAoJCX1cCgkJdWwjbmF2aWdhdGlvbk1lbnUgLnBob3RvcyBhICAgICB7XAoJCQliYWNrZ3JvdW5kLWltYWdlOiB1cmwoaHR0cDovL3R5bXBhbnVzLm5ldC9UdXRvcmlhbHMvRml4ZWROYXZpZ2F0aW9uVHV0b3JpYWwvaW1hZ2VzL2NhbWVyYS5wbmcpO1wKCQl9XAoJCXVsI25hdmlnYXRpb25NZW51IC5jb250YWN0IGEgICAge1wKCQkJYmFja2dyb3VuZC1pbWFnZTogdXJsKGh0dHA6Ly90eW1wYW51cy5uZXQvVHV0b3JpYWxzL0ZpeGVkTmF2aWdhdGlvblR1dG9yaWFsL2ltYWdlcy9tYWlsLnBuZyk7XAoJCX0qL1wKCQkiOwoJCQoJYWRkU3R5bGUoY3NzKTsKCQoJLy/mt7vliqDpnaLmnb8gLOmFjee9ruaYr+WQpuWPr+ingeWPiuaOkuW6jwoJJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJ1wKCQkJPHVsIGlkPSJuYXZpZ2F0aW9uTWVudSI+XAoJICAgICAgICAgICAgPGxpIGNsYXNzPSJnb1RvVG9wIj48YSBocmVmPWphdmFzY3JpcHQ6dm9pZCgwKTsgdGl0bGU9Iui3s+i9rOWIsOmhtumDqCI+PC9hPjwvbGk+XAoJICAgICAgICAgICAgPGxpIGNsYXNzPSJnb1RvQm90dG9tIj48YSBocmVmPWphdmFzY3JpcHQ6dm9pZCgwKTsgdGl0bGU9Iui3s+i9rOWIsOW6lemDqCI+PC9hPjwvbGk+XAoJICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2hCeUdvb2dsZSI+PGEgaHJlZj1qYXZhc2NyaXB0OnZvaWQoMCk7IHRpdGxlPSJnb29nbGXnq5nlhoXmkJzntKIiPjwvYT48L2xpPlwKCSAgICAgICAgICAgIDwhLS3kuI3pnIDopoHnmoTlm77moIfor7fmlL7liLDkuIvpnaJcCgkgICAgICAgICAgICA8bGkgY2xhc3M9InBob3RvcyI+PGEgaHJlZj1qYXZhc2NyaXB0OnZvaWQoMCk7IHRpdGxlPSJQaG90b3MiPjwvYT48L2xpPlwKCSAgICAgICAgICAgIDxsaSBjbGFzcz0icnNzZmVlZCI+PGEgaHJlZj1qYXZhc2NyaXB0OnZvaWQoMCk7IHRpdGxlPSJSc3MgRmVlZCI+PC9hPjwvbGk+XAoJICAgICAgICAgICAgPGxpIGNsYXNzPSJwb2RjYXN0cyI+PGEgaHJlZj1qYXZhc2NyaXB0OnZvaWQoMCk7IHRpdGxlPSJQb2RjYXN0cyI+PC9hPjwvbGk+XAoJICAgICAgICAgICAgPGxpIGNsYXNzPSJjb250YWN0Ij48YSBocmVmPWphdmFzY3JpcHQ6dm9pZCgwKTsgdGl0bGU9IkNvbnRhY3QiPjwvYT48L2xpPlwKCSAgICAgICAgICAgIC0tPlwKICAgICAgICAJPC91bD4nKQogICAgICAgIAkKCS8v6Ieq5Yqo6ZqQ6JePCgkkKCcjbmF2aWdhdGlvbk1lbnUgYScpLnN0b3AoKS5hbmltYXRlKHsKCQknbWFyZ2luTGVmdCcgOiBtYXJnaW5MZWZ0MQoJfSwgMTAwMCk7CgkkKCcjbmF2aWdhdGlvbk1lbnUgPiBsaScpLmhvdmVyKGZ1bmN0aW9uKCkgewoJCSQoJ2EnLCAkKHRoaXMpKS5zdG9wKCkuYW5pbWF0ZSh7CgkJCSdtYXJnaW5MZWZ0JyA6IG1hcmdpbkxlZnQyCgkJfSwgMjAwKTsKCX0sIGZ1bmN0aW9uKCkgewoJCSQoJ2EnLCAkKHRoaXMpKS5zdG9wKCkuYW5pbWF0ZSh7CgkJCSdtYXJnaW5MZWZ0JyA6IG1hcmdpbkxlZnQxCgkJfSwgMjAwKTsKCX0pOwoJCgkvL+WKn+iDvQoJJGh0bWwgPSAkKCdodG1sLGJvZHknKS5lcSgwKTsKCQoJJCgidWwjbmF2aWdhdGlvbk1lbnUgLmdvVG9Ub3AgYSIpLmNsaWNrKGZ1bmN0aW9uKCkgewoJCSRodG1sLmFuaW1hdGUoewoJCQlzY3JvbGxUb3AgOiAwCgkJfSwgc3BlZWRPZkdvVG9Ub3ApOwoJCXJldHVybiBmYWxzZTsKCX0pOwoKCSQoInVsI25hdmlnYXRpb25NZW51IC5nb1RvQm90dG9tIGEiKS5jbGljayhmdW5jdGlvbigpIHsKCQkkaHRtbC5hbmltYXRlKHsKCQkJc2Nyb2xsVG9wIDogZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQKCQl9LCBzcGVlZE9mR29Ub0JvdHRvbSk7CgkJcmV0dXJuIGZhbHNlOwoJfSk7CgoJJCgidWwjbmF2aWdhdGlvbk1lbnUgLnNlYXJjaEJ5R29vZ2xlIGEiKS5hdHRyKCJocmVmIiwiamF2YXNjcmlwdDpxJTIwPSUyMCUyMiUyMiUyMCslMjAod2luZG93LmdldFNlbGVjdGlvbiUyMD8lMjB3aW5kb3cuZ2V0U2VsZWN0aW9uKCklMjA6JTIwZG9jdW1lbnQuZ2V0U2VsZWN0aW9uJTIwPyUyMGRvY3VtZW50LmdldFNlbGVjdGlvbigpJTIwOiUyMGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLnRleHQpOyUyMGlmJTIwKCFxKSUyMHElMjA9JTIwcHJvbXB0KCUyMiVFOCVBRiVCNyVFOCVCRSU5MyVFNSU4NSVBNSVFNSU4NSVCMyVFOSU5NCVBRSVFOCVBRiU4RDolMjIsJTIwJTIyJTIyKTslMjBpZiUyMChxIT1udWxsKSUyMHt2YXIlMjBxbG9jYXRpb249JTIyJTIwJTIyO3Fsb2NhdGlvbj0oJ2h0dHA6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/bnVtPTEwMCZobD16aC1DTiZuZXd3aW5kb3c9MSZxPScrcSsnJnNpdGVzZWFyY2g9Jytsb2NhdGlvbi5ob3N0KycnKTt3aW5kb3cub3BlbihxbG9jYXRpb24pO30lMjB2b2lkJTIwMCIpOwoJCn0KLy/lop7liqDmoLflvI8KZnVuY3Rpb24gYWRkU3R5bGUoY3NzKSB7Cgl2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwoJc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7CglzdHlsZS50ZXh0Q29udGVudCA9IGNzczsKCWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGUpOwp9Owo="},{"name":"YouTube HD Suite","options":{"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_wrappedobj":false,"compat_filterproto":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_forvarin":true,"noframes":false,"run_at":"document-end"},"enabled":true,"position":5,"update_url":"http://userscripts.org/scripts/source/39167.user.js","source":""}]}